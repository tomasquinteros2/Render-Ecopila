services:
  eureka:
    build:
      context: .
      dockerfile: eureka-service/Dockerfile
    ports: ["8761:8761"]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
    volumes:
      - eureka-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  postgres-db-offline:
    image: postgres:14-alpine
    container_name: postgres_db_offline
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${OFFLINE_DB_NAME}
      POSTGRES_USER: ${OFFLINE_DB_USER}
      POSTGRES_PASSWORD: ${OFFLINE_DB_PASSWORD}
    volumes:
      - offline-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${OFFLINE_DB_USER} -d ${OFFLINE_DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data

  gateway-offline:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports: [ "8090:8090" ]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
      JWT_BASE64_SECRET: "${JWT_SECRET}"
    depends_on:
      eureka:
        condition: service_healthy
      redis:
        condition: service_started

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports: [ "8086:8086" ]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
      JWT_SECRET_KEY: "${JWT_SECRET}"
    depends_on:
      eureka:
        condition: service_healthy
      postgres-db-offline:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  dolar-service:
    build:
      context: .
      dockerfile: microservicio_dolar/Dockerfile
    ports: [ "8082:8082" ]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
    volumes:
      - offline-db-volume:/app/data
    depends_on:
      eureka:
        condition: service_healthy
      postgres-db-offline:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  producto-service:
    build:
      context: .
      dockerfile: microservicio_producto/Dockerfile
    ports: ["8083:8083"]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
    volumes:
      - offline-db-volume:/app/data
    depends_on:
      eureka:
        condition: service_healthy
      postgres-db-offline:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  proveedor-service:
    build:
      context: .
      dockerfile: microservicio_proveedor/Dockerfile
    ports: [ "8084:8084" ]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
    volumes:
      - offline-db-volume:/app/data
    depends_on:
      eureka:
        condition: service_healthy
      postgres-db-offline:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  tipo-producto-service:
    build:
      context: .
      dockerfile: microservicio_tipo_producto/Dockerfile
    ports: [ "8085:8085" ]
    environment:
      SPRING_PROFILES_ACTIVE: "offline"
    volumes:
      - offline-db-volume:/app/data
    depends_on:
      eureka:
        condition: service_healthy
      postgres-db-offline:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  symmetricds-client:
    build:
      context: .
      dockerfile: symmetricds/client/Dockerfile
    container_name: symmetricds_client
    ports: [ "8081:8081" ]
    environment:
      - SYM_DB_PASSWORD=${OFFLINE_DB_PASSWORD}
      - SYM_REGISTRATION_URL=http://${SYMMETRIC_MASTER_HOST}:31415/sync
    command: >
      sh -c "
        echo 'Replacing placeholders in client.properties...' &&
        sed -i 's|db.password=.*|db.password=${SYM_DB_PASSWORD}|' /app/engines/client.properties &&
        sed -i 's|registration.url=.*|registration.url=${SYM_REGISTRATION_URL}|' /app/engines/client.properties &&
        echo 'Placeholders replaced. Starting SymmetricDS client...' &&
        ./bin/sym --port 8081 --server
      "
    depends_on:
      producto-service:
        condition: service_healthy
      proveedor-service:
        condition: service_healthy
      tipo-producto-service:
        condition: service_healthy
      dolar-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy

volumes:
  eureka-data:
  redis-data:
  offline-db-volume: