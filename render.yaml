# render.yaml - Configuración para desplegar el BACKEND en modo "OFFLINE"

# --- Variables de Entorno Compartidas ---
# Grupo para los secretos que no deben estar en el repositorio.
# Debes crearlo en el Dashboard de Render: Env Groups > New Env Group
envVarGroups:
  - name: ecopila-secrets-offline
    envVars:
      # Define aquí tus secretos, como el de JWT.
      # Clave: JWT_BASE64_SECRET, Valor: tu_clave_secreta_larga
      - key: JWT_BASE64_SECRET
        value: "hRFxCC9ibkLnqP9Js9FiWRbCme1dbLPLIRzQVPKmhK/LscULomJ/flJJpUaZ+M9fa+hT0X4gpeileNbQJrEBrw=="
      - key: JWT_SECRET_KEY
        value: "hRFxCC9ibkLnqP9Js9FiWRbCme1dbLPLIRzQVPKmhK/LscULomJ/flJJpUaZ+M9fa+hT0X4gpeileNbQJrEBrw=="

# --- Infraestructura Base ---
databases:
  # Una base de datos PostgreSQL que simula tu 'postgres-db-offline'
  - name: postgres-db-offline
    plan: free
    postgresMajorVersion: 14

services:
  # Un Redis para la caché del gateway
  - type: redis
    name: redis-offline
    plan: free

  # --- Microservicios de la Aplicación ---
  - type: web
    name: gateway-offline
    plan: free
    env: docker
    dockerfilePath: ./gateway/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - fromGroup: ecopila-secrets-offline
      # Conexión directa a los servicios por su nombre en Render
      - key: GATEWAY_AUTH_SERVICE_URI
        value: http://auth-service-offline:8086
      - key: GATEWAY_PRODUCTO_SERVICE_URI
        value: http://producto-service-offline:8083
      - key: GATEWAY_PROVEEDOR_SERVICE_URI
        value: http://proveedor-service-offline:8084
      - key: GATEWAY_TIPO_PRODUCTO_SERVICE_URI
        value: http://tipo-producto-service-offline:8085
      - key: GATEWAY_DOLAR_SERVICE_URI
        value: http://dolar-service-offline:8082
      # Conexión al Redis de Render
      - key: REDIS_HOST
        fromService:
          type: redis
          name: redis-offline
          property: host

  - type: web
    name: auth-service-offline
    plan: free
    env: docker
    dockerfilePath: ./auth-service/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - fromGroup: ecopila-secrets-offline
      - key: SPRING_DATASOURCE_URL
        fromService:
          name: postgres-db-offline
          property: connectionString

  - type: web
    name: producto-service-offline
    plan: free
    env: docker
    dockerfilePath: ./microservicio_producto/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - key: SPRING_DATASOURCE_URL
        fromService:
          name: postgres-db-offline
          property: connectionString

  - type: web
    name: proveedor-service-offline
    plan: free
    env: docker
    dockerfilePath: ./microservicio_proveedor/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - key: SPRING_DATASOURCE_URL
        fromService:
          name: postgres-db-offline
          property: connectionString

  - type: web
    name: tipo-producto-service-offline
    plan: free
    env: docker
    dockerfilePath: ./microservicio_tipo_producto/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - key: SPRING_DATASOURCE_URL
        fromService:
          name: postgres-db-offline
          property: connectionString

  - type: web
    name: dolar-service-offline
    plan: free
    env: docker
    dockerfilePath: ./microservicio_dolar/Dockerfile
    dockerContext: .
    healthCheck:
      path: /actuator/health
      initialDelaySeconds: 60
    envVars:
      - key: SPRING_PROFILES_ACTIVE
        value: offline
      - key: SPRING_DATASOURCE_URL
        fromService:
          name: postgres-db-offline
          property: connectionString
